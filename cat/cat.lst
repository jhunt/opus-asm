     1                                  ;; vim:ft=nasm
     2                                  ;; cat - Read from standard input, write to standard output
     3                                  
     4                                  global _start
     5                                  section .text
     6                                  _start:
     7                                    ;; argc is at RSP
     8                                    ;; argv stretches from RSP+8
     9                                    ;;                  to RSP+8 + (8 * argc)
    10                                  
    11 00000000 4C8B2C24                  mov r13, [rsp]
    12 00000004 4983FD01                  cmp r13, 1
    13 00000008 7449                      je read1      ;; no arguments, use stdin
    14                                  
    15 0000000A 4D31E4                    xor r12, r12
    16                                  .next:
    17 0000000D 49FFC4                    inc r12
    18 00000010 4D39E5                    cmp r13, r12
    19 00000013 7432                      je .done
    20                                  
    21                                    ;; open(path, O_RDONLY)
    22 00000015 B802000000                mov rax, 2
    23 0000001A 4A8B7CE408                mov rdi, [rsp+8+8*r12]
    24 0000001F BE00000000                mov rsi, 0  ;; O_RDONLY
    25 00000024 0F05                      syscall
    26                                  
    27 00000026 4883F800                  cmp rax, 0
    28 0000002A 7C0F                      jl .failed
    29                                  
    30 0000002C 48890425[00000000]        mov [fd], rax
    31 00000034 E81A000000                call read1
    32 00000039 EBD2                      jmp .next
    33                                  
    34                                  .failed:
    35                                    ;; exit(1)
    36 0000003B B83C000000                mov rax, 60
    37 00000040 BF02000000                mov rdi, 2
    38 00000045 0F05                      syscall
    39                                  
    40                                  .done:
    41                                    ;; exit(0)
    42 00000047 B83C000000                mov rax, 60
    43 0000004C BF02000000                mov rdi, 2
    44 00000051 0F05                      syscall
    45                                  
    46                                  read1:
    47                                  .again:
    48                                    ;; read(fd, buf, len)
    49 00000053 B800000000                mov rax, 0
    50 00000058 488B3C25[00000000]        mov rdi, [fd]
    51 00000060 48BE-                     mov rsi, buf
    51 00000062 [0000000000000000] 
    52 0000006A BA00200000                mov rdx, len
    53 0000006F 0F05                      syscall
    54                                  
    55 00000071 4883F800                  cmp rax, 0
    56 00000075 7413                      je .done    ;; RAX = 0 means nothing to reade
    57 00000077 7C12                      jl .failed  ;; RAX < 0 means an error
    58                                  
    59                                  .write:
    60                                    ;; write(1, buf, ...)
    61 00000079 4889C2                    mov rdx, rax
    62 0000007C B801000000                mov rax, 1   ; has to be last, since return value of
    63                                                 ; read(...) call was in RAX, which we need
    64                                                 ; to pass to write(...) via RDX.
    65 00000081 BF01000000                mov rdi, 1
    66                                    ;; NB: RSI is unchanged from the read(...) call
    67 00000086 0F05                      syscall
    68 00000088 EBC9                      jmp .again
    69                                  
    70                                  .done:
    71 0000008A C3                        ret
    72                                  
    73                                  .failed:
    74                                    ;; exit(1)
    75 0000008B B83C000000                mov rax, 60
    76 00000090 BF01000000                mov rdi, 1
    77 00000095 0F05                      syscall
    78                                  
    79                                  section .data
    80 00000000 00000000                  fd dd 0
    81                                  section .bss
    82                                    len equ 8192
    83 00000000 <res 00002000>            buf resb $len
